name: Django CI/CD with Poetry

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install

      - name: Run migrations
        run: poetry run python manage.py migrate
        env:
          DJANGO_ENV: 'test'
          POSTGRES_DB: 'meira'  # Имя базы данных на Render
          POSTGRES_USER: 'meira_user'  # Имя пользователя базы данных на Render
          POSTGRES_PASSWORD: 'tFIolqnKMmGwsAK3jRhGe6XfsBStwTlK'  # Пароль для базы данных
          POSTGRES_HOST: 'dpg-ctronb3qf0us73di88rg-a'  # Хост для подключения к базе данных на Render
          POSTGRES_PORT: '5432'  # Порт базы данных
          SECRET_KEY: ${{ secrets.SECRET_KEY }}  # Секретный ключ Django

      - name: Run Django tests
        run: poetry run python manage.py test
        env:
          DJANGO_ENV: 'test'
          POSTGRES_DB: 'meira'  # Имя базы данных на Render
          POSTGRES_USER: 'meira_user'  # Имя пользователя базы данных на Render
          POSTGRES_PASSWORD: 'tFIolqnKMmGwsAK3jRhGe6XfsBStwTlK'  # Пароль для базы данных
          POSTGRES_HOST: 'dpg-ctronb3qf0us73di88rg-a'  # Хост для подключения к базе данных на Render
          POSTGRES_PORT: '5432'  # Порт базы данных
          SECRET_KEY: ${{ secrets.SECRET_KEY }}  # Секретный ключ Django

  deploy-server:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Copy project files to server
        run: |
          rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Install dependencies on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            source venv/bin/activate
            poetry install
          EOF

      - name: Apply migrations on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            source venv/bin/activate
            poetry run python manage.py migrate
          EOF

      - name: Collect static files on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            source venv/bin/activate
            poetry run python manage.py collectstatic --noinput
          EOF

      - name: Restart application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sudo systemctl restart myapp.service
          EOF

  deploy-render:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
      - name: Trigger Render Deployment
        run: curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
